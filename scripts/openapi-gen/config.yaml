# OpenAPI Generation Configuration
name: "Cosmos Documentation OpenAPI Generator"
version: "1.0.0"

# Source repositories to monitor for changes
sources:
  cosmos-evm:
    repo: "cosmos/evm"
    branch: "main"
    paths:
      - "x/vm/keeper/*.go"
      - "x/feemarket/keeper/*.go"
      - "rpc/backend/*.go"
      - "rpc/namespaces/*/*.go"
    output: "docs/api-specs/cosmos-evm-complete.json"
    type: "evm-jsonrpc"

  cosmos-sdk:
    repo: "cosmos/cosmos-sdk"
    branch: "main"
    paths:
      - "proto/cosmos/bank/v1beta1/*.proto"
      - "proto/cosmos/staking/v1beta1/*.proto"
      - "proto/cosmos/distribution/v1beta1/*.proto"
      - "proto/cosmos/gov/v1beta1/*.proto"
    output: "docs/api-specs/cosmos-sdk.json"
    type: "grpc-gateway"

  ibc:
    repo: "cosmos/ibc-go"
    branch: "main"
    paths:
      - "proto/ibc/**/*.proto"
      - "modules/*/types/*.proto"
    output: "docs/api-specs/ibc-core.json"
    type: "grpc-gateway"

# Generation settings
generation:
  # Auto-generate MDX pages for each endpoint
  auto_generate_pages: true

  # Output directory for generated MDX files
  pages_output: "docs/api-reference"

  # Include code examples for these languages
  code_examples:
    - curl
    - typescript
    - go
    - rust
    - python

  # CLI examples to include
  cli_examples:
    - cosmos-cli
    - direct-rpc

  # Server configurations
  servers:
    evm_rpc:
      - url: "https://evm-rpc.cosmos.network"
        description: "Cosmos EVM Mainnet"
      - url: "https://testnet-evm-rpc.cosmos.network"
        description: "Cosmos EVM Testnet"
      - url: "http://localhost:8545"
        description: "Local Development"

  cosmos_rest:
    - url: "https://rest.cosmos.network"
      description: "Cosmos REST Mainnet"
    - url: "https://testnet-rest.cosmos.network"
      description: "Cosmos REST Testnet"
    - url: "http://localhost:1317"
      description: "Local Development"

# Method categorization
categories:
  evm:
    account_methods:
      - "eth_getBalance"
      - "eth_getTransactionCount"
      - "eth_getCode"
      - "eth_getStorageAt"

    block_methods:
      - "eth_blockNumber"
      - "eth_getBlockByHash"
      - "eth_getBlockByNumber"
      - "eth_getBlockTransactionCountByHash"
      - "eth_getBlockTransactionCountByNumber"

    transaction_methods:
      - "eth_sendTransaction"
      - "eth_sendRawTransaction"
      - "eth_getTransactionByHash"
      - "eth_getTransactionByBlockHashAndIndex"
      - "eth_getTransactionByBlockNumberAndIndex"
      - "eth_getTransactionReceipt"
      - "eth_estimateGas"
      - "eth_call"

    fee_methods:
      - "eth_gasPrice"
      - "eth_feeHistory"
      - "eth_maxPriorityFeePerGas"

    filter_methods:
      - "eth_newFilter"
      - "eth_newBlockFilter"
      - "eth_newPendingTransactionFilter"
      - "eth_uninstallFilter"
      - "eth_getFilterChanges"
      - "eth_getFilterLogs"
      - "eth_getLogs"

    network_methods:
      - "net_version"
      - "net_listening"
      - "net_peerCount"

    web3_methods:
      - "web3_clientVersion"
      - "web3_sha3"

    debug_methods:
      - "debug_traceTransaction"
      - "debug_traceBlockByNumber"
      - "debug_traceBlockByHash"

    txpool_methods:
      - "txpool_status"
      - "txpool_content"
      - "txpool_inspect"

# Language-specific code examples
code_templates:
  curl:
    template: |
      curl -X POST {server_url} \
        -H "Content-Type: application/json" \
        -d '{
          "jsonrpc": "2.0",
          "method": "{method}",
          "params": {params},
          "id": 1
        }'

  javascript:
    template: |
      const { JsonRpcProvider } = require('ethers');

      const provider = new JsonRpcProvider('{server_url}');

      async function {function_name}({parameters}) {
        const result = await provider.send('{method}', {params});
        return result;
      }

  typescript:
    template: |
      import { JsonRpcProvider } from 'ethers';

      const provider = new JsonRpcProvider('{server_url}');

      async function {function_name}({parameters}): Promise<{return_type}> {
        const result = await provider.send('{method}', {params});
        return result;
      }

  python:
    template: |
      import requests
      import json

      def {function_name}({parameters}):
          payload = {
              "jsonrpc": "2.0",
              "method": "{method}",
              "params": {params},
              "id": 1
          }

          response = requests.post('{server_url}',
                                   json=payload,
                                   headers={'Content-Type': 'application/json'})
          return response.json()['result']

  golang:
    template: |
      package main

      import (
          "bytes"
          "encoding/json"
          "fmt"
          "net/http"
      )

      type JSONRPCRequest struct {
          JSONRPC string        `json:"jsonrpc"`
          Method  string        `json:"method"`
          Params  []interface{} `json:"params"`
          ID      int           `json:"id"`
      }

      type JSONRPCResponse struct {
          JSONRPC string      `json:"jsonrpc"`
          Result  interface{} `json:"result"`
          ID      int         `json:"id"`
      }

      func {function_name}({parameters}) (interface{}, error) {
          payload := JSONRPCRequest{
              JSONRPC: "2.0",
              Method:  "{method}",
              Params:  {params},
              ID:      1,
          }

          jsonPayload, _ := json.Marshal(payload)
          resp, err := http.Post("{server_url}", "application/json", bytes.NewBuffer(jsonPayload))
          if err != nil {
              return nil, err
          }
          defer resp.Body.Close()

          var result JSONRPCResponse
          json.NewDecoder(resp.Body).Decode(&result)
          return result.Result, nil
      }

# Webhook configuration for automatic updates
webhooks:
  enabled: true
  secret_name: "OPENAPI_WEBHOOK_SECRET"
  allowed_repos:
    - "cosmos/evm"
    - "cosmos/cosmos-sdk"
    - "cosmos/ibc-go"

# Documentation metadata
metadata:
  title: "Cosmos API Documentation"
  description: "Comprehensive API documentation for Cosmos blockchain ecosystem"
  version: "1.0.0"
  contact:
    name: "Cosmos EVM Documentation"
    url: "https://docs.cosmos.network"
    email: "docs@cosmos.network"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"